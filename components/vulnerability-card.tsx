import Link from "next/link"
import { formatDate, getLevelColor, getStatusColor, getStatusText } from "@/lib/utils"
import { highlightSearchTerm } from "@/lib/search"
import type { Vulnerability } from "@/lib/types"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Calendar, Tag, AlertTriangle } from "lucide-react"

interface VulnerabilityCardProps {
  vulnerability: Vulnerability
  searchTerm?: string
}

export function VulnerabilityCard({ vulnerability, searchTerm = "" }: VulnerabilityCardProps) {
  const { frontmatter, slug } = vulnerability

  const highlightedTitle = searchTerm ? highlightSearchTerm(frontmatter.title, searchTerm) : frontmatter.title
  const highlightedDescription =
    searchTerm && frontmatter.description
      ? highlightSearchTerm(frontmatter.description, searchTerm)
      : frontmatter.description
  const highlightedId = searchTerm ? highlightSearchTerm(frontmatter.id, searchTerm) : frontmatter.id

  return (
    <Link href={`/vulnerability/${slug}`} className="block">
      <Card className="hover:shadow-lg transition-all duration-200 hover:scale-[1.02] cursor-pointer">
        <CardHeader className="pb-3">
          <div className="flex items-start justify-between">
            <div className="space-y-2">
              <CardTitle className="text-lg hover:text-primary transition-colors">
                <span dangerouslySetInnerHTML={{ __html: highlightedTitle }} />
              </CardTitle>
              <div className="flex items-center space-x-2 text-sm text-muted-foreground">
                <span className="font-mono" dangerouslySetInnerHTML={{ __html: highlightedId }} />
                <span>•</span>
                <div className="flex items-center space-x-1">
                  <Calendar className="h-3 w-3" />
                  <span>{formatDate(frontmatter.discoveredAt)}</span>
                </div>
              </div>
            </div>
            <div className="flex flex-col space-y-2">
              <Badge className={getLevelColor(frontmatter.level)} variant="secondary">
                等级 {frontmatter.level}
              </Badge>
              <Badge className={getStatusColor(frontmatter.status)} variant="secondary">
                {getStatusText(frontmatter.status)}
              </Badge>
            </div>
          </div>
        </CardHeader>

        <CardContent className="pt-0">
          <div className="space-y-3">
            {frontmatter.description && (
              <p className="text-sm text-muted-foreground line-clamp-2">
                <span dangerouslySetInnerHTML={{ __html: highlightedDescription || frontmatter.description }} />
              </p>
            )}

            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-1 text-sm text-muted-foreground">
                <Tag className="h-3 w-3" />
                <span>{frontmatter.category}</span>
              </div>

              {frontmatter.status === "unresolved" && (
                <div className="flex items-center space-x-1 text-sm text-red-600 dark:text-red-400">
                  <AlertTriangle className="h-3 w-3" />
                  <span>需要关注</span>
                </div>
              )}
            </div>

            {frontmatter.tags && frontmatter.tags.length > 0 && (
              <div className="flex flex-wrap gap-1">
                {frontmatter.tags.slice(0, 3).map((tag) => (
                  <Badge key={tag} variant="outline" className="text-xs">
                    {tag}
                  </Badge>
                ))}
                {frontmatter.tags.length > 3 && (
                  <Badge variant="outline" className="text-xs">
                    +{frontmatter.tags.length - 3}
                  </Badge>
                )}
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </Link>
  )
}
