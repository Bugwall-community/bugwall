import { getVulnerabilityBySlug, getAllVulnerabilities } from "@/lib/markdown"
import { Navigation } from "@/components/navigation"
import { GiscusWrapper } from "@/components/giscus-wrapper"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { formatDate, getLevelColor, getStatusColor, getStatusText } from "@/lib/utils"
import { ArrowLeft, Calendar, Tag, AlertTriangle } from "lucide-react"
import Link from "next/link"
import { notFound } from "next/navigation"

interface VulnerabilityPageProps {
  params: {
    slug: string
  }
}

export async function generateStaticParams() {
  const vulnerabilities = await getAllVulnerabilities()
  return vulnerabilities.map((vulnerability) => ({
    slug: vulnerability.slug,
  }))
}

export default async function VulnerabilityPage({ params }: VulnerabilityPageProps) {
  const vulnerability = await getVulnerabilityBySlug(params.slug)

  if (!vulnerability) {
    notFound()
  }

  const { frontmatter, htmlContent } = vulnerability

  return (
    <div className="min-h-screen bg-background">
      <Navigation />

      <main className="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Back Button */}
        <div className="mb-6">
          <Button variant="ghost" asChild>
            <Link href="/vulnerabilities">
              <ArrowLeft className="mr-2 h-4 w-4" />
              返回漏洞列表
            </Link>
          </Button>
        </div>

        {/* Header */}
        <div className="mb-8">
          <div className="flex flex-col lg:flex-row lg:items-start lg:justify-between gap-4 mb-6">
            <div className="space-y-2">
              <h1 className="text-3xl font-bold">{frontmatter.title}</h1>
              <div className="flex items-center space-x-4 text-sm text-muted-foreground">
                <span className="font-mono">{frontmatter.id}</span>
                <div className="flex items-center space-x-1">
                  <Calendar className="h-3 w-3" />
                  <span>{formatDate(frontmatter.discoveredAt)}</span>
                </div>
                <div className="flex items-center space-x-1">
                  <Tag className="h-3 w-3" />
                  <span>{frontmatter.category}</span>
                </div>
              </div>
            </div>

            <div className="flex flex-col space-y-2">
              <Badge className={getLevelColor(frontmatter.level)} variant="secondary">
                等级 {frontmatter.level}
              </Badge>
              <Badge className={getStatusColor(frontmatter.status)} variant="secondary">
                {getStatusText(frontmatter.status)}
              </Badge>
            </div>
          </div>

          {frontmatter.description && <p className="text-lg text-muted-foreground mb-4">{frontmatter.description}</p>}

          {frontmatter.tags && frontmatter.tags.length > 0 && (
            <div className="flex flex-wrap gap-2 mb-4">
              {frontmatter.tags.map((tag) => (
                <Badge key={tag} variant="outline">
                  {tag}
                </Badge>
              ))}
            </div>
          )}

          {frontmatter.status === "unresolved" && (
            <div className="mt-4 p-4 bg-red-50 dark:bg-red-950/20 border border-red-200 dark:border-red-800 rounded-lg">
              <div className="flex items-center space-x-2 text-red-800 dark:text-red-200">
                <AlertTriangle className="h-4 w-4" />
                <span className="font-medium">此漏洞尚未修复，需要关注</span>
              </div>
            </div>
          )}
        </div>

        {/* Content */}
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          <div className="lg:col-span-3">
            <Card>
              <CardContent className="p-6">
                <div className="prose prose-gray dark:prose-invert max-w-none">
                  <div className="markdown-content" dangerouslySetInnerHTML={{ __html: htmlContent }} />
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Sidebar */}
          <div className="lg:col-span-1 space-y-6">
            {/* Quick Actions */}
            <Card>
              <CardHeader>
                <CardTitle className="text-base">快速操作</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                <Button variant="outline" size="sm" className="w-full justify-start bg-transparent" asChild>
                  <Link href={`/vulnerabilities?category=${encodeURIComponent(frontmatter.category)}`}>
                    <Tag className="mr-2 h-3 w-3" />
                    查看同类漏洞
                  </Link>
                </Button>
                <Button variant="outline" size="sm" className="w-full justify-start bg-transparent" asChild>
                  <Link href={`/vulnerabilities?level=${frontmatter.level}`}>
                    <AlertTriangle className="mr-2 h-3 w-3" />
                    查看同等级漏洞
                  </Link>
                </Button>
                <Button variant="outline" size="sm" className="w-full justify-start bg-transparent" asChild>
                  <Link href={`/vulnerabilities?status=${frontmatter.status}`}>查看同状态漏洞</Link>
                </Button>
              </CardContent>
            </Card>

            {/* Vulnerability Info */}
            <Card>
              <CardHeader>
                <CardTitle className="text-base">漏洞信息</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className="text-sm text-muted-foreground">ID:</span>
                  <span className="font-mono text-sm">{frontmatter.id}</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-muted-foreground">等级:</span>
                  <Badge className={getLevelColor(frontmatter.level)} variant="secondary">
                    {frontmatter.level}
                  </Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-muted-foreground">状态:</span>
                  <Badge className={getStatusColor(frontmatter.status)} variant="secondary">
                    {getStatusText(frontmatter.status)}
                  </Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-muted-foreground">发现时间:</span>
                  <span className="text-sm">{formatDate(frontmatter.discoveredAt)}</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-muted-foreground">分类:</span>
                  <span className="text-sm">{frontmatter.category}</span>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Comments Section */}
        <div className="mt-12">
          <Card>
            <CardHeader>
              <CardTitle>讨论区</CardTitle>
            </CardHeader>
            <CardContent>
              <GiscusWrapper slug={params.slug} />
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  )
}
